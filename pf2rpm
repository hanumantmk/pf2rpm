#!/usr/bin/perl -w

###############################################################################
# Program: pf2rpm
# Author: Jason Carey
# License: 2 Clause BSD, see accompanying LICENSE file
#
# Summary:
# pf2rpm is meant to provide some automatic wrapping for modules written and
# stored in puppet forge when used in a rpm based environment.  It talks to a
# handful of puppet forge json APIs, specifically the search api and the
# dependency info api to faciliate this.  Additionally, after fetching a
# tarball, pf2rpm can read the generated metadata.json file to generate a spec
# file.  All of this occurs in a rpm style topdir, such that you can run direct
# output to some standard location to build with other tools, or have pf2rpm
# build rpms for you

use strict;

use Getopt::Long;
use List::Util qw( max first );
use Archive::Tar;
use Cwd qw( abs_path );
use LWP;
use URI;
use JSON;
use File::Basename;
use File::Path qw( make_path );
use Template;
use version;

use constant SEARCH_URI => "/modules.json";
use constant DEP_INFO_URI => "/api/v1/releases.json";

use constant APPLICATIONS => {
    'search' => \&search,
    'create' => \&create,
};

my $verbose;
my $debug;

my $repo;
my $forge = "http://forge.puppetlabs.com";
my $build_rpms;
my $build_srpms;

GetOptions(
    'forge=s' => \$forge,
    'repo=s'  => \$repo,
    'rpm'     => \$build_rpms,
    'srpm'    => \$build_srpms,
    'verbose' => \$verbose,
    'debug'   => \$debug,
    'help'    => sub { &HELP(0) },
) or HELP(1);

my $application = shift @ARGV;

$application ||= '';

if (APPLICATIONS->{$application}) {
    APPLICATIONS->{$application}->(@ARGV);
} else {
    print "invalid application '$application'\n";
    HELP(1);
}

# Search for packages using the puppet forge search api
sub search {
    my ($term) = @_;
    my $ua = make_ua();

    verbose("Searching for $term...");

    my @data = map {
        [$_->{full_name}, $_->{desc}]
    } @{from_json(make_req($ua, $forge . SEARCH_URI, ["q", $term]))};

    render_table(\@data);
}

# build spec files, rpms and srpms for puppet forge packages
sub create {
    my ($package, $version) = @_;

    $repo or print "Please enter a repo\n" and HELP(1);

    verbose("Ensuring paths for $repo");

    # repo is basically a rpm topdir.  We mirror that layout

    make_path(
	$repo,
	"$repo/SOURCES",
	"$repo/SPECS",
    );

    my $ua = make_ua();

    # another puppet forge api can give us all the dependency info we need
    my $output = get_dependency_info($ua, $package, $version);

    # foreach package, grab a tarball, write a spec and optionally build some
    # packages
    foreach my $pkg (keys %$output) {
	my $info = $output->{$pkg};

	ensure_tarball($ua, $info);
	my $specfile = write_specfile($info);
        build_rpms($specfile);
    }
}

# build rpms using rpmbuild.  Only build rpms (source or binary) that are
# requested)
sub build_rpms {
    my $specfile = shift;

    # topdir takes an absolute path
    my $repo_dir = abs_path($repo);

    my @rpmbuild = ("rpmbuild", "--define", "_topdir $repo_dir", $specfile);

    if ($build_srpms && $build_rpms) {
        verbose("building source and binary rpms");
        push @rpmbuild, "-ba";
    } elsif ($build_rpms) {
        verbose("only building binary rpms");
        push @rpmbuild, "-bb";
    } elsif ($build_srpms) {
        verbose("only building source rpms");
        push @rpmbuild, "-bs";
    } else {
        # don't build anything
        return;
    }

    verbose("Running rpmbuild @rpmbuild");

    system(@rpmbuild);
}

# Fetches the tarball for a package if one isn't already on disk
sub ensure_tarball {
    my ($ua, $info) = @_;

    verbose("Ensuring tarball for $info->{file}");

    my $fname = "$repo/SOURCES/$info->{file}";

    if (! -e $fname) {
        verbose("Fetching tarball for $info->{file}");

	my $data = make_req($ua, "$forge/$info->{url}");

	open FILE, '>', $fname or die "Couldn't open file $fname: $!";

	print FILE $data;

	close FILE or die "Couldn't close file $fname: $!";
    }
}

# Grabs dependency info for a package from puppet forge.  This includes a
# concalized path name for an eventual file download as well as all other
# recursive dependencies and their paths
sub get_dependency_info {
    my ($ua, $package, $version) = @_;

    verbose("Gathering dependency info for $package...");

    my $deps = from_json(
        make_req($ua, $forge . DEP_INFO_URI, [
            'module', "$package",
            ( $version ? ("version", $version) : ()),
        ])
    );

    my %output = map {
        my $pkg = $_;

        # a little Schwartzian transform to find the latest version
        my ($latest) = map { $_->[1] } sort {
            $b->[0] <=> $a->[0]
        } map {
            [ parse_version($_->{version}), $_ ];
        } @{$deps->{$pkg}};

        # split out (X.X.X)-(Y) into version and release.  We can't just put it
        # all into version because rpm has some expectations of version strings
        my ($version, $release) = split /-/, $latest->{version};

        $pkg, {
            version      => $version,
            release      => $release,
            url          => "$pkg/$latest->{version}.tar.gz",
            file         => "puppetforge-" . basename($latest->{file}),
            dependencies => $latest->{dependencies},
        };
    } keys %$deps;

    return \%output;
}

# Makes sure version strings with release portions (I.e. x.x.x-y) can still
# sort reasonably.  Or if there are alphanumerics in there
sub parse_version {
    my $vstr = shift;

    $vstr =~ s/[a-zA-Z]//g;
    $vstr =~ s/-/./g;

    version->parse($vstr);
}

# Make a new LWA user agent
sub make_ua {
    my $ua = LWP::UserAgent->new;
    $ua->agent("pf2rpm/0.1 ");

    return $ua;
}

# Form a LWP GET request with appropriate query params, dispatch it and get the
# response
sub make_req {
    my ($ua, $uri, $values) = @_;

    my $url = URI->new($uri);
    $url->query_form(@$values);

    verbose("Requesting $url...");

    my $response = $ua->get($url);

    if ($response->is_success) {
        verbose("Succesfully retrieved content for $url");
        debug("Content = [" . $response->content . "]");

        return $response->content;
    } else {
        die "Request failed for $url: " . $response->status_line;
    }
}

# renders a table of data such that columns of data are left adjusted within
# themselves.  I.e.
# 
# foo bar baz
# foooo barrrr baz
#
# goes to
#
# foo   bar    baz
# foooo barrrr baz
sub render_table {
    my ($data) = @_;

    my @max_widths;

    foreach my $row (@$data) {
        for (my $i = 0; $i < @$row; $i++) {
            $max_widths[$i] ||= 0;
            $max_widths[$i] = max($max_widths[$i], length($row->[$i]));
        }
    }

    my $fmt = join(' ', map {
        "%-${_}s"
    } @max_widths) . "\n";

    printf($fmt, @$_) for @$data;
}

# Write out a spec file
#
# We get a bunch of this data by looking in the tarball we downloaded from
# puppet forge and extracting the metadata.json file.  This includes a lot of
# the data we'll put in the spec file
sub write_specfile {
    my $info = shift;

    my $tar = Archive::Tar->new("$repo/SOURCES/$info->{file}");

    $tar or die "Couldn't open $info->{file}";

    # no knowing what the tarball's top level extraction is going to look like,
    # so just find a metadata.json file
    my $metadata_file = first { 
	$_->name =~ /metadata\.json$/
    } $tar->get_files;

    if (! $metadata_file) {
	die "no metadata.json for $info->{file}";
    }

    my $m = from_json($metadata_file->get_content);

    # turn dependencies into rpm style names
    my @deps = map {
	my $pkg = $_->{name};
	$pkg =~ s/\//-/g;

	"puppetforge-$pkg $_->{version_requirement}";
    } @{$m->{dependencies}};

    my $module = $m->{name};
    $module =~ s/^$m->{author}-//;

    my $builddir = join("-",
        $m->{name},
        $info->{version},
        ($info->{release} ? $info->{release} : ()),
    );

    my $vars = {
	dependencies => \@deps,
	description  => $m->{description},

        # metdata.json isn't in it's own checksum list, so throw that in there
        # too
	files        => ["metadata.json", keys %{$m->{checksums}}],

	license      => $m->{license},
	module       => $module,
	name         => "puppetforge-$m->{name}",
	summary      => $m->{summary},
	version      => $info->{version},
        release      => $info->{release} || 1,
        source       => $info->{file},
        builddir     => $builddir,
    };

    my $tt = Template->new();

    my $template = SPEC_TEMPLATE();

    my $spec_name = "$repo/SPECS/puppetforge-$m->{name}.spec";

    verbose("Writing $spec_name");

    $tt->process(\$template, $vars, $spec_name);

    return $spec_name;
}

sub verbose { print "@_\n" if $verbose || $debug }
sub debug { print "@_\n" if $debug }

sub HELP {
    my $exit = shift;

    print <<HELP ;
$0 - APPLICATION APPLICATION_PARAMS [OPTIONS]

Applications
    search TERM   search for a package

    create PKG    create rpms for the given package and it's dependencies.
                  This always downloads all necessary tarballs and builds spec
                  files.  By default no rpms or srpms are produced

        --repo    the repository to work in
        --srpm    build srpms
        --rpm     build rpms

Options
    --forge       url serving the puppet forge api
    --help        this help notice

Debugging
    --verbose     High level messages
    --debug       Low level messages
HELP

    exit $exit;
}

use constant SPEC_TEMPLATE => <<'SPEC' ;
%define name [% name %]
%define release   [% release %]
%define version   [% version %]

Summary: [% summary %]
License: [% license %]
Name:%{name}
Version:%{version}
Release:%{release}
Source: [% source %]

[% FOREACH dep IN dependencies.sort %]
Requires: [% dep %] [% END %]

%prep
%setup -q -n [% builddir %]

%install
mkdir -p %{buildroot}%{_datarootdir}/puppet/modules/[% module %]
cp -r * %{buildroot}%{_datarootdir}/puppet/modules/[% module %]

%files
[% FOREACH file IN files.sort %]
%{_datarootdir}/puppet/modules/[% module %]/[% file %][% END %]

%description
[% description %]

SPEC
